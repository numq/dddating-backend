services:
  amqp:
    image: rabbitmq:latest
    env_file:
      - .env
    volumes:
      - ./:/data
    ports:
      - '${AMQP_PORT}:${AMQP_PORT}'
    restart: on-failure

  redis:
    image: redis:latest
    env_file:
      - .env
    volumes:
      - ./:/data
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    restart: on-failure

  mongo:
    image: mongo:latest
    env_file:
      - .env
    volumes:
      - ./:/data
    ports:
      - '${MONGO_PORT}:${MONGO_PORT}'
    restart: on-failure

  account:
    build:
      args:
        SERVICE_NAME: account
    env_file:
      - .env
    depends_on:
      - mongo
    volumes:
      - ./:/data
    ports:
      - '${ACCOUNT_PORT}:${ACCOUNT_PORT}'
    restart: on-failure

  token:
    build:
      args:
        SERVICE_NAME: token
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      - ./:/data
    ports:
      - '${TOKEN_PORT}:${TOKEN_PORT}'
    restart: on-failure

  authentication:
    build:
      args:
        SERVICE_NAME: authentication
    env_file:
      - .env
    depends_on:
      - account
      - token
    volumes:
      - ./:/data
    ports:
      - '${AUTHENTICATION_PORT}:${AUTHENTICATION_PORT}'
    restart: on-failure

  conversation:
    build:
      args:
        SERVICE_NAME: conversation
    env_file:
      - .env
    environment:
      AMQP_HOSTNAME: host.docker.internal
    depends_on:
      - mongo
      - amqp
    volumes:
      - ./:/data
    ports:
      - '${CONVERSATION_PORT}:${CONVERSATION_PORT}'
    restart: on-failure

  matchmaking:
    build:
      args:
        SERVICE_NAME: matchmaking
    env_file:
      - .env
    environment:
      AMQP_HOSTNAME: host.docker.internal
    depends_on:
      - mongo
      - redis
      - amqp
    volumes:
      - ./:/data
    ports:
      - '${MATCHMAKING_PORT}:${MATCHMAKING_PORT}'
    restart: on-failure

  profile:
    build:
      args:
        SERVICE_NAME: profile
    env_file:
      - .env
    depends_on:
      - mongo
    volumes:
      - ./:/data
    ports:
      - '${PROFILE_PORT}:${PROFILE_PORT}'
    restart: on-failure

  recommendation:
    build:
      args:
        SERVICE_NAME: recommendation
    env_file:
      - .env
    environment:
      AMQP_HOSTNAME: host.docker.internal
      MATCHMAKING_HOSTNAME: host.docker.internal
      PROFILE_HOSTNAME: host.docker.internal
    depends_on:
      - redis
      - matchmaking
      - profile
    volumes:
      - ./:/data
    ports:
      - '${RECOMMENDATION_PORT}:${RECOMMENDATION_PORT}'
    restart: on-failure

  safety:
    build:
      args:
        SERVICE_NAME: safety
    env_file:
      - .env
    depends_on:
      - mongo
    volumes:
      - ./:/data
    ports:
      - '${SAFETY_PORT}:${SAFETY_PORT}'
    restart: on-failure

  support:
    build:
      args:
        SERVICE_NAME: support
    env_file:
      - .env
    depends_on:
      - mongo
    volumes:
      - ./:/data
    ports:
      - '${SUPPORT_PORT}:${SUPPORT_PORT}'
    restart: on-failure

  gateway:
    build:
      args:
        SERVICE_NAME: gateway
    env_file:
      - .env
    depends_on:
      - authentication
      - conversation
      - matchmaking
      - profile
      - recommendation
      - safety
      - support
    volumes:
      - ./:/data
    ports:
      - '${GATEWAY_PORT}:${GATEWAY_PORT}'
    restart: on-failure